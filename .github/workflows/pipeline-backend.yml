name: LabManagement Backend Pipeline

on:
  push:
    branches:
      - master
    paths:
      - '**/*.java'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - .github/workflows/pipeline-backend.yml
      - 'pom.xml'
      - 'src/**'
jobs:
  compile:
    runs-on: ubuntu-20.04
    name: Compile Project
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'

      - name: Kiểm tra quyền file mvnw
        run: ls -l mvnw

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x mvnw

      - name: Compile Project
        run: |
          ./mvnw clean compile




  unit-test:
    runs-on: ubuntu-20.04
    name: Unit Tests
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x mvnw

      - name: Compile Project
        run: ./mvnw clean compile




  build:
    runs-on: ubuntu-20.04
    name: Build backend
    needs: [compile,unit-test]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x mvnw

      - name: Compile project
        run: |
          ./mvnw clean compile



  build-image:
    name: Build Docker Image
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x mvnw

      - name: Extract project version
        id: extract_version
        run: |
          VERSION=$(./mvnw org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lab:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/lab:latest
          build-args:
            PROFILE=prod
            APP_VERSION=${{steps.extract_version.outputs.VERSION}}

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-20.04
    needs: [ build-image ]
    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Create deployment folder
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: SET ENV variables and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOSTNAME }}
          export EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF


  
  









